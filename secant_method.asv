%Secant Solver Problem

function [x, guesses_x0, guesses_x1, guesses_it] = secant_method(fun, x0, x1)

    %Secant solver takes two initial inputs and updates new guess off of
    %the secant line of the two inputs
    
    a_thresh = 1e-14;
    b_thresh = 1e-14;
    max_iter = 1000;
    
    guesses = [];

    x_prev = x0; 
    x_n = x1;
    i = 0; 

    %Defining function at guessed root
    [f_n, ~] = fun(x_n);
        
    %Defining function at previous guessed root
    [f_prev, ~] = fun(x_prev);

    while i < max_iter && abs(f_n - f_prev) < 1000000000 && abs(x_n - x_prev) < a_thresh && f_prev < b_thresh
        
        %Update new root for secant method
        x_prev = x_n; 
        x_n = x_n - f_n * ((x_n - x_prev)/(f_n - f_prev));

        guesses(end+1) = x_n;
        
        guesses_x0 = guesses(1:end-1);
        guesses_x1 = guesses(2:end);
        guesses_it = 1:(length(guesses)-1);
    end

    for i = max_iter
        
        %Defining function at guessed root
        [f_n, ~] = fun(x_n);
        
        %Defining function at previous guessed root
        [f_prev, ~] = fun(x_prev);
        
        if abs(f_n - f_prev) == 0
            disp ("Update step is too large")
            break
        end 
        %Update new root for secant method
        x_next = x_n - f_n * ((x_n - x_prev)/(f_n - f_prev));
        
        if abs(x_next - x_prev) < a_thresh && f_n < b_thresh
            disp("Root found")
            break
        end

        %Update previous root for secant method 
        xprev_list = [xprev_list, x_prev];
        x_prev = x_n; 
        
        %Update new root for secant method
        x_n = x_next;
        xn_list = [xn_list, x_n];

        x_count = [x_count, count];
        count = count + 1; 
    end 

    if i == max_iter
        disp("Root not found")
    end

    x_root = x_n;
end 